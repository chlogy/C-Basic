#include <iostream>

using namespace std;

/*
	동적할당 :	메모리 생성을 원하는 시점에 할 수 있는 기능이다.
				메모리 영역 중 힙 영역에 공간이 할당된다.
				힙의 특성상 메모리를 해제하기 전 까지는 계속 남아있다.

				동적할당을 하고 메모리를 해제하지 않으면 사용하지 않지만 공간은 계속 잡혀있게 된다.
				해당 공간은 다른 공간에서 사용이 불가능하다.
				왜냐하면 커널에서 그 곳을 할당해주지 않을 뿐더러
				접근할 수 있는 방법은 할당을 받을 시 받은 포인터 변수로만 접근이 가능하기 때문이다.

				이런 현상을 메모리 릭이라고 한다. Memory Leak

	
	형태 :		new 할당할 타입;

*/

int main()
{
	// C Style
	int* Cptr = (int*)malloc(sizeof(int));	
	free(Cptr);
	Cptr = nullptr;

	/////////////////////////////////////////
	
	// C++ Style
	int* ptr = new int;
	int* ptr2 = ptr;
	/*
		이렇게 할당할 타입을 new 뒤에 오는 타입인 int의 크기만큼, int 데이터 타입으로 공간을 할당한다.

		4바이트 공간을 할당하는 것이다. 그 뒤에 우리가 할당한 공간의 주소를 ptr에 대입한 것.
	*/
	*ptr = 300;
	delete ptr;
	/*
		delete 키워드를 이용해서 동적할당한 메모리를 해제할 수 있다.
		delete 뒤에 메모리 주소를 넣어주면 된다.
	*/
	

	/*
		동적으로 배열을 할당하는 방법 : new 타입[개수]; 의 형태로 사용.
	*/

	int* pArray = new int[100];
	pArray[0] = 300;

	delete[] pArray;	// 위 처럼 100개를 할당한 400바이트 만큼 힙 영역에서 할당하고 그 주소를 반환해준 것

	return 0;
}